import { Injectable } from '@angular/core';
import {
  Auth,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
  updateEmail,
  updatePassword,
  reauthenticateWithCredential,
  EmailAuthProvider,
  User,
  sendEmailVerification,
  sendPasswordResetEmail,
} from '@angular/fire/auth';
import { Observable, BehaviorSubject } from 'rxjs';
import { onAuthStateChanged } from 'firebase/auth';

@Injectable({
  providedIn: 'root',
})
export class FirebaseAuthService {
  private uidSubject = new BehaviorSubject<string | null>(null);
  uid$ = this.uidSubject.asObservable(); // Observable für UID-Änderungen

  constructor(private auth: Auth) {
    // Auth-State überwachen und UID setzen
    onAuthStateChanged(this.auth, (user) => {
      const uid = user?.uid || null;
      this.uidSubject.next(uid);
    });
  }

  
  /**
   * Registriert einen neuen Benutzer.
   */
  async register(email: string, password: string): Promise<User> {
    try {
      const userCredential = await createUserWithEmailAndPassword(
        this.auth,
        email,
        password
      );
      this.uidSubject.next(userCredential.user.uid);
      return userCredential.user;
    } catch (error) {
      console.error('Registrierungsfehler:', error);
      throw error;
    }
  }

  /**
   * Meldet einen Benutzer an.
   */
  async login(email: string, password: string): Promise<User> {
    try {
      const userCredential = await signInWithEmailAndPassword(
        this.auth,
        email,
        password
      );
      this.uidSubject.next(userCredential.user.uid);
      return userCredential.user;
    } catch (error) {
      console.error('Anmeldefehler:', error);
      throw error;
    }
  }

  /**
   * Meldet den aktuellen Benutzer ab.
   */
  async logout(): Promise<void> {
    try {
      await signOut(this.auth);
      this.uidSubject.next(null);
    } catch (error) {
      console.error('Fehler beim Abmelden:', error);
      throw error;
    }
  }

  /**
   * Gibt den aktuellen Benutzer als Observable zurück.
   */
  getCurrentUser(): Observable<User | null> {
    return new Observable((observer) => {
      const unsubscribe = onAuthStateChanged(this.auth, (user) => {
        observer.next(user);
      });
      return { unsubscribe };
    });
  }

  /**
   * Gibt die aktuelle UID synchron zurück.
   */
  getUid(): string | null {
    return this.uidSubject.getValue();
  }

  /**
   * Aktualisiert die E-Mail des Benutzers.
   */
/**
 * Aktualisiert die E-Mail des Benutzers.
 */
async updateEmail(newEmail: string, password: string): Promise<void> {
  const user = this.auth.currentUser;
  if (!user) {
    throw new Error('Kein Benutzer angemeldet.');
  }

  try {
    // Zuerst den Benutzer re-authentifizieren
    await this.reauthenticate(password);
    console.log('Benutzer erfolgreich erneut authentifiziert.');

    // Dann die E-Mail ändern
    await updateEmail(user, newEmail);
    console.log('E-Mail erfolgreich aktualisiert.');
  } catch (error) {
    console.error('Fehler beim Aktualisieren der E-Mail:', error);
    throw error;
  }
}


  /**
   * Aktualisiert das Passwort des Benutzers.
   */
  async updatePassword(newPassword: string): Promise<void> {
    const user = this.auth.currentUser;
    if (!user) {
      throw new Error('Kein Benutzer angemeldet.');
    }

    try {
      await updatePassword(user, newPassword);
      console.log('Passwort erfolgreich aktualisiert.');
    } catch (error) {
      console.error('Fehler beim Aktualisieren des Passworts:', error);
      throw error;
    }
  }

  /**
   * Authentifiziert den Benutzer erneut (z.B. vor sensiblen Änderungen).
   */
  async reauthenticate(password: string): Promise<void> {
    const user = this.auth.currentUser;
    if (!user || !user.email) {
      throw new Error('Kein Benutzer oder keine E-Mail-Adresse gefunden.');
    }
  
    const credential = EmailAuthProvider.credential(user.email, password);
  
    try {
      await reauthenticateWithCredential(user, credential);
      console.log('Benutzer erfolgreich erneut authentifiziert.');
    } catch (error) {
      console.error('Fehler bei der erneuten Authentifizierung:', error);
      throw error;
    }
  }
  
    /**
   * Sendet eine Verifizierungs-E-Mail an den angemeldeten Benutzer.
   */
    async sendEmailVerification(): Promise<void> {
      const user = this.auth.currentUser;
      if (!user) {
        throw new Error('Kein Benutzer angemeldet.');
      }
  
      try {
        await sendEmailVerification(user);
        console.log('Verifizierungs-E-Mail wurde gesendet.');
        console.log('Verifizierungs-E-Mail gesendet an:', user.email);

      } catch (error) {
        console.error('Fehler beim Senden der Verifizierungs-E-Mail:', error);
        throw error;
      }
    }
    
    async checkEmailVerification(): Promise<boolean> {
      const user = this.auth.currentUser;
      if (!user) {
        throw new Error('Kein Benutzer angemeldet.');
      }
    
      // Benutzerinformationen aktualisieren
      await user.reload();
      return user.emailVerified;
    }

}
import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatDialogModule } from '@angular/material/dialog';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatDialogRef } from '@angular/material/dialog';
import { FirebaseAuthService } from '../../../services/firebase-auth.service';
import { User } from '../../../models/user.class';

@Component({
  selector: 'app-dialog-edit-user-auth-data',
  standalone: true,
  imports: [
    MatDialogModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    FormsModule,
  ],
  templateUrl: './dialog-edit-user-auth-data.component.html',
  styleUrl: './dialog-edit-user-auth-data.component.scss'
})
export class DialogEditUserAuthDataComponent {
  user = new User();
  newEmail: string = '';
  newPassword: string = '';
  currentPassword: string = ''; // Für die Reauthentifizierung

  constructor(
    private dialogRef: MatDialogRef<DialogEditUserAuthDataComponent>,
    private authService: FirebaseAuthService
  ) {}

  /**
   * Aktualisiert die E-Mail des Benutzers.
   */
// async changeEmail(): Promise<void> {
//   try {
//     // Schritt 1: Benutzer reauthentifizieren
//     await this.authService.reauthenticate(this.currentPassword);

//     // Schritt 2: Verifizierungs-E-Mail senden
//     await this.authService.sendEmailVerification();
//     alert('Eine Verifizierungs-E-Mail wurde an die neue Adresse gesendet. Bitte überprüfen Sie diese, bevor Sie die Änderung vornehmen.');

//     // Schritt 3: Warte, bis die E-Mail bestätigt wurde (manuell oder mit einem weiteren Schritt im Backend)
//     console.log('Bitte warten Sie, bis die neue E-Mail-Adresse bestätigt wurde.');
//   } catch (error: any) {
//     alert('Fehler beim Aktualisieren der E-Mail: ' + error.message);
//   }
// }

  
  async changePassword(): Promise<void> {
    try {
      await this.authService.reauthenticate(this.currentPassword); // Nur das Passwort übergeben
      await this.authService.updatePassword(this.newPassword);
      alert('Passwort erfolgreich aktualisiert!');
      this.dialogRef.close();
    } catch (error: any) {
      alert('Fehler beim Aktualisieren des Passworts: ' + error.message);
    }
  }
  

  /**
   * Dialog schließen.
   */
  closeDialog(): void {
    this.dialogRef.close();
  }
  async changeEmail(): Promise<void> {
    try {
      // Schritt 1: Benutzer reauthentifizieren
      await this.authService.reauthenticate(this.currentPassword);
  
      // Schritt 2: Verifizierungs-E-Mail senden
      await this.authService.sendEmailVerification();
      alert(
        'Eine Verifizierungs-E-Mail wurde an die neue Adresse gesendet. Bitte überprüfen Sie diese, bevor Sie die Änderung vornehmen.'
      );
  
      // Schritt 3: Überprüfen, ob die E-Mail bestätigt wurde
      const interval = setInterval(async () => {
        const isVerified = await this.authService.checkEmailVerification();
        if (isVerified) {
          clearInterval(interval);
          clearTimeout(timeout); // Timeout abbrechen
  
          try {
            // Schritt 4: E-Mail-Adresse aktualisieren (nur wenn die E-Mail verifiziert ist)
            await this.authService.updateEmail(this.newEmail, this.currentPassword);
            alert('E-Mail erfolgreich bestätigt und aktualisiert!');
            this.dialogRef.close();
          } catch (updateError: any) {
            alert(
              'E-Mail konnte nicht aktualisiert werden: ' + updateError.message
            );
          }
        }
      }, 5000); // Alle 5 Sekunden prüfen
  
      // Timeout für das Polling
      const timeout = setTimeout(() => {
        clearInterval(interval);
        alert('Die Verifizierung hat zu lange gedauert. Bitte erneut versuchen.');
      }, 60000); // Timeout nach 60 Sekunden
    } catch (error: any) {
      alert('Fehler beim Aktualisieren der E-Mail: ' + error.message);
    }
  }
  
  
  
}
 